using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LibRbxl.Internal;
using NUnit.Framework;

namespace LibRbxl.Test
{
    [TestFixture]
    public class TypeHeaderTests
    {
        [Test]
        public void Read_NoAdditionalData()
        {
            var data = new byte[] {0x13, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x61, 0x72, 0x74, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x06 };

            var parsed = TypeHeader.Deserialize(data);

            Assert.AreEqual("Part", parsed.Name);
            Assert.AreEqual(0x13, parsed.TypeId);
            Assert.AreEqual(3, parsed.InstanceCount);
            Assert.AreEqual(new[] {2, 3, 6}, parsed.Referents);
            Assert.IsNull(parsed.AdditionalData);
        }

        [Test]
        public void Read_AdditionalData()
        {
            var data = new byte[] { 0x13, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x61, 0x72, 0x74, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x06, 0x01, 0x02, 0x03 };

            var parsed = TypeHeader.Deserialize(data);

            Assert.AreEqual("Part", parsed.Name);
            Assert.AreEqual(0x13, parsed.TypeId);
            Assert.AreEqual(3, parsed.InstanceCount);
            Assert.AreEqual(new[] { 2, 3, 6 }, parsed.Referents);
            Assert.AreEqual(new byte[] {0x1, 0x2, 0x3}, parsed.AdditionalData);
        }

        [Test]
        public void Write_NoAdditionalData()
        {
            var typeHeader = new TypeHeader("Part", 0x13, new []{0x2, 0x1, 0x3});
            var expectedBytes = new byte[] { 0x13, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x61, 0x72, 0x74, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x04 };
            
            var bytes = typeHeader.Serialize();

            Assert.AreEqual(expectedBytes, bytes);
        }

        [Test]
        public void Write_AdditionalData()
        {
            var typeHeader = new TypeHeader("Part", 0x13, new[] { 0x2, 0x1, 0x3 }, new byte[]{0x1, 0x1, 0x1});
            var expectedBytes = new byte[] { 0x13, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x50, 0x61, 0x72, 0x74, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x04, 0x01, 0x01, 0x01 };
            
            var bytes = typeHeader.Serialize();

            Assert.AreEqual(expectedBytes, bytes);
        }
    }
}